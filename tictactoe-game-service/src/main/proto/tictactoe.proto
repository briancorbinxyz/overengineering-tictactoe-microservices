syntax = "proto3";
// Ref: https://protobuf.dev/programming-guides/proto3/

option java_multiple_files = true;
option java_package = "org.xxdc.oss.example.service";
option java_outer_classname = "TicTacToeProto";

package tictactoe;


// The gaming service definition.
service TicTacToeGame {
    // Sends a greeting
    rpc JoinGame (JoinRequest) returns (JoinResponse) {}
    rpc MakeMove (GameMoveRequest) returns (GameMoveResponse) {} 
    rpc Subscribe (SubscriptionRequest) returns (stream GameUpdate) {}
    rpc Exists (GameExistsRequest) returns (GameExistsResponse) {}
    rpc ActiveGames (GamesActiveRequest) returns (GamesActiveResponse) {}
}

// The reponse to check if a game exists
message GamesActiveRequest {
}
// The reponse to check if a game exists
message GamesActiveResponse {
    repeated string game_id = 1;
}
// The request to check if a game exists
message GameExistsRequest {
    string game_id = 1;
}

// The reponse to check if a game exists
message GameExistsResponse {
    string game_id = 1;
    bool exists = 2;
}

enum GameLevel {
    EASY = 0;
    MEDIUM = 1;
    HARD = 2;
}
// The request message containing the user message
message JoinRequest {
    string request_id = 1;
    string name = 2;
    optional string message = 3;
    optional GameLevel bot_level = 4;
}


// The response message containing the join response
message JoinResponse {
    string request_id = 1;
    GameUpdate initial_update = 2;
    Player assigned_player = 3;
    string message = 4;
}

message SubscriptionRequest {
    string game_id = 1;
}

message GameUpdate {
    string game_id = 1;
    State state = 2;
}

message GameMoveRequest {
    string game_id = 1;
    Player player = 2;
    int32 move = 3;
}

message GameMoveResponse {
    string game_id = 1;
    Player player = 2;
    int32 move = 3;
    bool success = 4;
}

// The player
message Player {
    int32 index = 1;
    string marker = 2;
}

// The game board
message Board {
    int32 dimension = 1;
    repeated string contents = 2;
}

message BoardEntry {
    int32 player_index = 1;
}

// The game state
message State {
    Board board = 1;
    repeated Player players = 2;
    int32 current_player_index = 3;
    optional int32 previous_move = 4;
    bool completed = 5;
    optional int32 winning_player_index = 6;
}